/* vim: set filetype=c:ai:et:sw=4:ts=4:sts=4: */

#include "segway.h"

#define VOL 3
#define SETSAMPLES 20

//PID param init
#define KP 6
#define KI 0
#define KD 0
#define TS 0.005
#define KK 5

/** global variable holding setpoint value for controlled process */
unsigned int setpoint = 0;

/** Controller task that executes pid and feeds its output to motors */
task controller() {
    float y1 = 0, y2 = 0, e2 = 0, I2 = 0;
    long t0;
    float out;

    ClearScreen();

    while (true) {
        y1 = SENSOR_3;
        out = pid(y1, y2, e2, I2);
        NumOut(40, LCD_LINE1, out);
        NumOut(40, LCD_LINE2, out * KK);

        OnRev(OUT_BC, out * KK);

        Wait(TS * 1000);
    }
}


task main() {
    SetSensorLight(IN_3);
    setpoint = get_setpoint();

    Precedes(controller);

}

/** Initialize setpoint value.
 *  Function executed right after start of the program. User should hold the
 *  Legoway in balance. After three short beeps Legoway should be able to
 *  balance by itself.
 *
 * @return setpoint value
 */
unsigned int get_setpoint() {
    unsigned int retval = 0;
    unsigned int tmp = 0;
    float vals = 0;

    ClearScreen();
    TextOut(0, LCD_LINE2, "Calibrating...");
    TextOut(0, LCD_LINE3, "Wait until beep...");

    for (int i=0; i<SETSAMPLES; i++) {
        tmp = SENSOR_3
        vals += tmp;
        NumOut(40, LCD_LINE4, tmp);
        Wait(250);
    }
    vals /= 20;
    retval = vals;

    /* beep three times to signal end of calibration*/
    repeat (3){
        PlayToneEx(TONE_C7, 100, VOL, FALSE);  Wait(200);
    }

    /* show final setpoint value */
    ClearScreen();
    TextOut(0, LCD_LINE3, "setpoint:");
    NumOut(0, LCD_LINE4, retval);

    return retval;
}


/** PID controller
 *  Actually this is PSD controller (Sum instead of Integral).
 *
 * @param y1 light sensor value
 * @param y2 previous value of light sensor
 * @param e2 value of error from previous run
 * @param I2 previous value of integral gain
 *
 * @return controller output
 */
float pid(float &y1, float &y2, float &e2, float &I2) {

    float e1, u, P, I1, D;

    e1 = setpoint - y1;
    P = KP * e2;
    I1 = (KI * e1 * TS) + I2;
    D = (KD / TS) * (e1 - e2);

    u = P + I1 + D;

    y2 = y1;
    e2 = e1;
    I2 = I1;

    return u;
}

